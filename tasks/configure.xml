<?xml version="1.0"?>
<project name="configure" default="configure">
    <!--
        This can be used to configure the build properties for a project.
      -->

    <!-- Uses the project directory name as the projectname -->
    <property name="build.dir" value="${application.startdir}" />
    <basename property="projectname" file="${build.dir}" suffix="local" />

    <!-- Target: configure -->
    <!--
        Try:
        configure -Dbuild.env=vagrant -Dupdate=drupal.site_name              ## Updates drupal.site_name only
        configure -Dbuild.env=vagrant -Dupdate=drupal.root -Ddrupal.root=www ## Updates drupal.root to www
        configure -Dbuild.env=vagrant -Dupdate=drupal.new_setting            ## Adds a new setting
     -->
    <target name="configure">
        <propertyprompt propertyName="build.env" defaultValue="vagrant" promptText="Environment" promptCharacter=":" useExistingValue="true" />

        <property name="propertiesfile" value="conf/build.${build.env}.properties" />

        <phingcall target="configure-init-environment" />

        <!-- Load properties from the environment we're editing, with the prefix "default.*" -->
        <property file="${build.dir}/${propertiesfile}" prefix="default" />
        <property file="${build.dir}/conf/build.default.properties" prefix="default" />

        <!-- Defaults and prompts. -->
        <property name="prompt.drupal.root" value="Drupal root" />
        <property name="default.drupal.root" value="web" />

        <property name="prompt.drupal.uri" value="Drupal URI" />
        <property name="default.drupal.uri" value="http://${projectname}.local" />

        <property name="prompt.drupal.site_name" value="Site name" />
        <property name="default.drupal.site_name" value="${projectname}" />

        <property name="prompt.drupal.private_files_dir" value="Drupal private files, relative to the Drupal root" />
        <property name="default.drupal.private_files_dir" value="../artifacts/private" />

        <property name="prompt.build.drupal.files" value="Source directory for Drupal files, relative to the project root" />
        <property name="default.build.drupal.files" value="artifacts/files" />

        <property name="prompt.drupal.database.database" value="Drupal database name" />
        <property name="default.drupal.database.database" value="drupal" />

        <property name="prompt.drupal.database.username" value="Drupal database username" />
        <property name="default.drupal.database.username" value="root" />

        <property name="prompt.drupal.database.password" value="Drupal database password" />
        <property name="default.drupal.database.password" value="root" />

        <property name="prompt.drupal.database.host" value="Drupal database host" />
        <property name="default.drupal.database.host" value="127.0.0.1" />

        <property name="prompt.drupal.profile" value="Install profile" />
        <property name="default.drupal.profile" value="standard" />

        <property name="prompt.drupal.modules_enable" value="Modules to enable upon install, separated by commas" />
        <property name="default.drupal.modules_enable" value="" />

        <property name="update" value="drupal.root,drupal.uri,drupal.site_name,drupal.private_files_dir,build.drupal.files,drupal.database.database,drupal.database.username,drupal.database.password,drupal.profile,drupal.modules_enable" />

        <!-- Update properties interactively. -->
        <foreach list="${update}" target="configure-update-property" param="propertyname" />
    </target>


    <target name="configure-init-environment">
        <fail unless="build.dir" />
        <fail unless="propertiesfile" />

        <!-- Create the conf directory if it doesn't already exist. -->
        <if>
            <not><available file="${build.dir}/conf" /></not>
            <then>
                <mkdir dir="${build.dir}/conf" />
            </then>
        </if>

        <!-- Create the properties file if it doesn't already exist. -->
        <if>
            <not><available file="${build.dir}/${propertiesfile}" /></not>
            <then>
                <touch file="${build.dir}/${propertiesfile}" />
            </then>
        </if>
    </target>


    <target name="configure-update-property">
        <fail unless="build.dir" />
        <fail unless="propertiesfile" />
        <fail unless="propertyname" />

        <property name="prompt.${propertyname}" value="Enter a value for '${propertyname}'" />
        <property name="default.${propertyname}" value="" />

        <!-- Get the new property value from the user. -->
        <propertyprompt propertyName="${propertyname}" defaultValue="${default.${propertyname}}" promptText="${prompt.${propertyname}}" promptCharacter=":" useExistingValue="true" />

        <!-- Load the properties file so we can see if the property is in there yet. -->
        <loadfile property="propertiesfile.contents" file="${build.dir}/${propertiesfile}">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="^${propertyname}=" />
                </linecontainsregexp>
            </filterchain>
        </loadfile>

        <!-- If the property isn't set there yet, add a line for it. -->
        <if>
            <not><contains string="${propertiesfile.contents}" substring="${propertyname}=" /></not>
            <then>
                <!-- Whitespace is significant within this echo; adds a newline after the new property. -->
                <echo file="${build.dir}/${propertiesfile}" append="true">${propertyname}=
</echo>
            </then>
        </if>

        <!-- Apply the new setting to the properties file. -->
        <reflexive>
            <fileset dir="${build.dir}" includes="${propertiesfile}" />
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${propertyname}=.*" replace="${propertyname}=${${propertyname}}" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>


    <!-- Target: configure-defaults -->
    <target name="configure-defaults" description="Create a fresh default properties file.">
        <!-- A build.env is required. -->
        <property name="build.env" value="default" override="true" />
        <property name="propertiesfile" value="conf/build.${build.env}.properties" override="true" />

        <!-- Delete the existing defaults file so that it is recreate with the defaults. -->
        <delete file="${build.dir}/${propertiesfile}" />
        <phingcall target="configure" />
    </target>


    <!-- Target: configure-drush -->
    <target name="configure-drush" description="Create a drushrc file for a specific environment.">
        <!-- A build.env is required. -->
        <propertyprompt propertyName="build.env" defaultValue="vagrant" promptText="Environment" promptCharacter=":" useExistingValue="true" />
        <property name="propertiesfile" value="conf/build.${build.env}.properties" />

        <!-- Load default properties values. -->
        <property file="${build.dir}/${propertiesfile}" prefix="default" />
        <property file="${build.dir}/conf/build.default.properties" prefix="default" />

        <!-- Fail if the variables we need aren't available. -->
        <if>
            <not>
                <and>
                    <isset property="default.drupal.root" />
                    <isset property="default.drupal.uri" />
                    <isset property="default.drupal.site_name" />
                </and>
            </not>
            <then>
                <fail message="Missing properties; Run the 'configure' or 'configure-defaults' task and try again." />
            </then>
        </if>

        <!-- Copy the drushrc template and sub in variables. -->
        <copy file="${phing.dir.configure}/../conf/drushrc.php" tofile="${build.dir}/conf/drushrc.${build.env}.php" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="drupal.root" value="${default.drupal.root}"/>
                    <token key="drupal.uri" value="${default.drupal.uri}"/>
                    <token key="drupal.site_name" value="${default.drupal.site_name}"/>
                    <token key="drupal.sites_subdir" value="default"/>
                </replacetokens>
            </filterchain>
        </copy>
    </target>


</project>
