<?xml version="1.0"?>

<!--
  @file the-build.xml
  Contains the-build's environment-specific property loading.

  This file is included in the build.dist.xml template with:
    <import file="vendor/palantirnet/the-build/tasks/the-build.xml" />

  Copyright 2016, 2017, 2018 Palantir.net, Inc.
  -->

<project name="the-build" default="the-build">

    <!-- Provide the <includeresource /> task. -->
    <taskdef name="includeresource" classname="TheBuild\IncludeResourceTask" />

    <!-- Provide the <foreachkey /> task. -->
    <taskdef name="foreachkey" classname="TheBuild\ForeachKeyTask" />

    <!-- Provide the <copyproperties /> task. -->
    <taskdef name="copyproperties" classname="TheBuild\CopyPropertiesTask" />

    <!-- Alias the build directory to the Phing start directory. -->
    <property name="build.dir" value="${application.startdir}" />

    <!-- Use the project directory name as the project name -->
    <basename property="projectname" file="${build.dir}" suffix="local" />

    <!-- Provide the path to the-build's code for loading templates and defaults -->
    <!-- Phing maps the project name "the-build" to "the_build". -->
    <resolvepath file="${phing.dir.the_build}/../" propertyName="build.thebuild.dir" />

    <!-- Use the PALANTIR_ENVIRONMENT env variable to set the build environment. -->
    <if>
        <isset property="env.PALANTIR_ENVIRONMENT" />
        <then>
            <property name="build.env" refid="env.PALANTIR_ENVIRONMENT" />
        </then>
    </if>

    <!-- Provide a default build environment. -->
    <property name="build.env" value="default" />


    <!-- Load build properties from the project environment, the project defaults, and
         finally from the-build's own defaults.
         -->
    <if>
        <not><isset property="build.defaults_loaded" /></not>
        <then>
            <!-- Load the project's environment-specific properties. -->
            <if>
                <available file="${build.dir}/.the-build/build.${build.env}.properties.yml" />
                <then>
                    <property file="${build.dir}/.the-build/build.${build.env}.properties.yml" />
                </then>
            </if>

            <!-- Load the project's defaults. This may be loaded twice, but that
                 should not be a problem. -->
            <property file="${build.dir}/.the-build/build.default.properties.yml" />

            <!-- Load the-build's global defaults. -->
            <property file="${build.thebuild.dir}/defaults.properties.yml" />

            <!-- Prevent the-build from reloading properties. -->
            <property name="build.defaults_loaded" value="true" />
        </then>
    </if>


    <!-- Set our current site. -->
    <!-- @todo:
           - get a list of property keys within 'drupal.sites.'
           - if there's just one key, copy the properties
           - if there's more than one key, prompt to select
           - use a runtime flag like -Dbuild.site=foo
           - maybe also allow setting the default with an environment variable? or some
             other way to work on one site at a time without the flag?
          - watch out for site names with . in them - those won't be iterable as keys
         -->
    <!-- Copy defaults in first. -->
    <copyproperties fromPrefix="drupal.sites._defaults" toPrefix="drupal.site" override="true" />
    <!-- Override defaults with any site-specific values. -->
    <copyproperties fromPrefix="drupal.sites.default" toPrefix="drupal.site" override="true" />

    <!-- Validate that required Drupal site properties are present. -->
    <fail unless="drupal.site.dir" msg="The 'drupal.sites.default.dir' property must be set in order to run build tasks." />
    <fail unless="drupal.site.uri" msg="The 'drupal.sites.default.uri' property must be set in order to run build tasks." />
    <!-- Fill in defaults for Drupal site properties. -->
    <property name="drupal.site.config_sync_directory" value="../config/sites/${drupal.site.dir}" />
    <property name="drupal.site.database.database" value="${drupal.site.dir}" />
    <property name="drupal.site.settings.file_public_path" value="sites/${drupal.site.dir}/files" />
    <property name="drupal.site.settings.file_private_path" value="../artifacts/private/default" />
    <property name="drupal.site.build.settings_dest" value="${drupal.root}/sites/${drupal.site.dir}/settings.build.php" />
    <property name="drupal.site.build.services_dest" value="${drupal.root}/sites/${drupal.site.dir}/services.build.yml" />


    <!-- Define and configure the 'drush' Phing task. -->
    <taskdef name="drush" classname="Drush\Task" />
    <property name="drush.bin" value="${build.dir}/vendor/bin/drush" />
    <property name="drush.uri" refid="drupal.site.uri" />
    <property name="drush.root" value="${build.dir}/${drupal.root}" />
    <property name="drush.config" value="${build.dir}/drush/drushrc.php" />


    <!--
        Default target: the-build
        This target is included only because the <project> tag requires it.
        -->
    <target name="the-build">
        <echo>Hello! I'm the-build.</echo>
    </target>


    <!--
        Target: mkdir
        Utility target to allow creating a list of directories with <foreach />.
        -->
    <target name="mkdir">
        <echo msg="${dir}" />
        <mkdir dir="${dir}" />
    </target>


</project>
