<?xml version="1.0"?>

<!--
  @file the-build.xml
  Contains the-build's environment-specific property loading.

  This file is included in the build.dist.xml template with:
    <import file="vendor/palantirnet/the-build/tasks/the-build.xml" />

  Copyright 2016, 2017, 2018 Palantir.net, Inc.
  -->

<project name="the-build" default="the-build">

    <!-- Provide the <includeresource /> task. -->
    <taskdef name="includeresource" classname="TheBuild\IncludeResourceTask" />

    <!-- Provide the <foreachkey /> task. -->
    <taskdef name="foreachkey" classname="TheBuild\ForeachKeyTask" />

    <!-- Provide the <copyproperties /> task. -->
    <taskdef name="copyproperties" classname="TheBuild\CopyPropertiesTask" />

    <!-- Provide the <selectpropertykey /> task. -->
    <taskdef name="selectpropertykey" classname="TheBuild\SelectPropertyKeyTask" />


    <!-- Alias the build directory to the Phing start directory. -->
    <property name="build.dir" value="${application.startdir}" />

    <!-- Use the project directory name as the project name -->
    <basename property="projectname" file="${build.dir}" suffix="local" />

    <!-- Provide the path to the-build's code for loading templates and defaults -->
    <!-- Phing maps the project name "the-build" to "the_build". -->
    <resolvepath file="${phing.dir.the_build}/../" propertyName="build.thebuild.dir" />

    <!-- Use the PALANTIR_ENVIRONMENT env variable to set the build environment. -->
    <if>
        <isset property="env.PALANTIR_ENVIRONMENT" />
        <then>
            <property name="build.env" refid="env.PALANTIR_ENVIRONMENT" />
        </then>
    </if>

    <!-- Use the THE_BUILD_SITE env variable to set the default site. -->
    <if>
        <isset property="env.THE_BUILD_SITE" />
        <then>
            <property name="build.site" refid="env.THE_BUILD_SITE" />
        </then>
    </if>

    <!-- Provide a default build environment. -->
    <property name="build.env" value="default" />


    <!-- Load build properties from the project environment, the project defaults, and
         finally from the-build's own defaults.
         -->
    <if>
        <not><isset property="build.defaults_loaded" /></not>
        <then>
            <!-- Load the project's environment-specific properties. -->
            <if>
                <available file="${build.dir}/.the-build/build.${build.env}.properties.yml" />
                <then>
                    <property file="${build.dir}/.the-build/build.${build.env}.properties.yml" />
                </then>
            </if>

            <!-- Load the project's defaults. This may be loaded twice, but that
                 should not be a problem. -->
            <property file="${build.dir}/.the-build/build.default.properties.yml" />

            <!-- Load the-build's global defaults. -->
            <property file="${build.thebuild.dir}/defaults.properties.yml" />


            <!-- Set our current site. -->
            <!--
                 @todo
                 The downside of this approach is that the user is prompted for a site even when a site is not required for the target that
                 they're trying to run, like 'artifact' or 'code-review'. This prompt only appears if there is more than one Drupal multisite
                 set up, and those two targets are less frequently run, but it's still confusing and annoyinng when it happens!
                 -->
            <selectpropertykey prefix="drupal.sites." omitKeys="_defaults" propertyName="build.site" message="Select a site to build:" />
            <!-- Copy defaults in first. -->
            <copyproperties fromPrefix="drupal.sites._defaults" toPrefix="drupal.site" override="true" />
            <!-- Override defaults with any site-specific values. -->
            <copyproperties fromPrefix="drupal.sites.${build.site}" toPrefix="drupal.site" override="true" />


            <!-- Validate that required Drupal site properties are present. -->
            <fail unless="drupal.site.dir" msg="The 'drupal.sites.${build.site}.dir' property must be set in order to run build tasks." />
            <fail unless="drupal.site.uri" msg="The 'drupal.sites.${build.site}.uri' property must be set in order to run build tasks." />
            <!-- Fill in defaults for Drupal site properties. -->
            <property name="drupal.site.config_sync_directory" value="../config/sites/${drupal.site.dir}" />
            <property name="drupal.site.database.database" value="${drupal.site.dir}" />
            <property name="drupal.site.settings.file_public_path" value="sites/${drupal.site.dir}/files" />
            <property name="drupal.site.settings.file_private_path" value="../artifacts/private/${drupal.site.dir}" />
            <property name="drupal.site.build.settings_dest" value="${drupal.root}/sites/${drupal.site.dir}/settings.build.php" />
            <property name="drupal.site.build.services_dest" value="${drupal.root}/sites/${drupal.site.dir}/services.build.yml" />


            <!-- Prevent the-build from reloading properties. -->
            <property name="build.defaults_loaded" value="true" />
        </then>
    </if>


    <!-- Define and configure the 'drush' Phing task. -->
    <taskdef name="drush" classname="Drush\Task" />
    <property name="drush.bin" value="${build.dir}/vendor/bin/drush" />
    <property name="drush.uri" refid="drupal.site.uri" />
    <property name="drush.root" value="${build.dir}/${drupal.root}" />
    <property name="drush.config" value="${build.dir}/drush/drushrc.php" />


    <!--
        Default target: the-build
        This target is included only because the <project> tag requires it.
        -->
    <target name="the-build">
        <echo>Hello! I'm the-build.</echo>
    </target>


    <!--
        Target: mkdir
        Utility target to allow creating a list of directories with <foreach />.
        -->
    <target name="mkdir">
        <echo msg="${dir}" />
        <mkdir dir="${dir}" />
    </target>


</project>
