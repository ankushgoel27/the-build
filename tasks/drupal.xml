<?xml version="1.0"?>

<!--
  @file drupal.xml
  Targets for managing Drupal.

  Include this file in your build.xml with:
    <import file="vendor/palantirnet/the-build/tasks/drupal.xml" />

  @see defaults.properties.yml

  Copyright 2016, 2018 Palantir.net, Inc.
  -->

<project name="Drupal" default="drupal-build">

    <fail unless="build.dir" />
    <fail unless="build.env" />
    <fail unless="projectname" />

    <fail unless="drupal.root" />


    <!-- Include and configure the 'drush' Phing task. -->
    <taskdef name="drush" classname="Drush\Task" />
    <property name="drush.bin" value="${build.dir}/vendor/bin/drush" />
    <property name="drush.uri" refid="drupal.uri" />
    <property name="drush.root" value="${build.dir}/${drupal.root}" />
    <property name="drush.config" value="${build.dir}/drush/drushrc.php" />


    <target name="drupal-build" description="Prepare Drupal for installation.">
        <phingcall target="drupal-prepare-filesystem" />
        <phingcall target="drupal-prepare-settings" />
        <phingcall target="drupal-prepare-services" />
    </target>


    <!-- Target: drupal-prepare-filesystem -->
    <target name="drupal-prepare-filesystem">
        <fail unless="drupal.root" />
        <fail unless="drupal.sites_subdir" />
        <fail unless="drupal.settings.file_public_path" />

        <!-- Create the Drupal modules, themes, profiles, and sites directories. -->
        <foreach target="create-placeholder" param="placeholder_for">
            <filelist dir="${build.dir}" files="${drupal.root}/modules/custom,${drupal.root}/themes/custom,${drupal.root}/profiles/custom,${drupal.root}/sites/${drupal.sites_subdir}" />
        </foreach>

        <!-- The site directory needs to have some perms. -->
        <chmod file="${drupal.root}/sites/${drupal.sites_subdir}" mode="750" />

        <!-- The public files directory, and everything in it, needs to be world writable. -->
        <resolvepath propertyName="drupal.settings.file_public_path.resolved" file="${drupal.root}/${drupal.settings.file_public_path}" />
        <exec command="chmod -R 777 ${drupal.settings.file_public_path.resolved}" />
    </target>


    <!-- Target: drupal-prepare-settings -->
    <target name="drupal-prepare-settings">
        <fail unless="build.drupal.settings" />
        <fail unless="build.drupal.settings_dest" />

        <copy file="${build.dir}/${build.drupal.settings}" tofile="${build.dir}/${build.drupal.settings_dest}" overwrite="true" mode="555">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>
    </target>


    <!-- Target: drupal-prepare-services -->
    <target name="drupal-prepare-services">
        <fail unless="build.drupal.services" />
        <fail unless="build.drupal.services_dest" />

        <copy file="${build.dir}/${build.drupal.services}" tofile="${build.dir}/${build.drupal.services_dest}" overwrite="true" mode="644">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>
    </target>


    <!-- Target: create-placeholder -->
    <target name="create-placeholder">
        <fail unless="placeholder_for" message="The 'placeholder_for' property is required." />
        <resolvepath propertyName="placeholder_for.resolved" file="${placeholder_for}" dir="${build.dir}" />

        <if>
            <not><available file="${placeholder_for.resolved}" type="dir" /></not>
            <then>
                <mkdir dir="${placeholder_for.resolved}" />
                <touch file="${placeholder_for.resolved}/.gitkeep" />
            </then>
            <else>
                <echo>${placeholder_for} already exists.</echo>
            </else>
        </if>
    </target>


    <!-- Target: drupal-install -->
    <target name="drupal-install" description="Install Drupal.">
        <fail unless="drupal.settings.file_public_path" />
        <fail unless="drupal.root" />
        <fail unless="drupal.site_name" />
        <fail unless="drupal.sites_subdir" />
        <fail unless="drupal.profile" />
        <fail unless="drupal.admin_user" />

        <phingcall target="validate-clean-conf" />

        <resolvepath propertyName="drupal.settings.file_public_path.resolved" file="${drupal.root}/${drupal.settings.file_public_path}" />

        <!-- The sites subdirectory should be writable; Drupal will change the
             permissions on this directory after install. -->
        <chmod file="${build.dir}/${drupal.root}/sites/${drupal.sites_subdir}" mode="777" />

        <!-- Make settings.php writable -->
        <chmod file="${build.dir}/${drupal.root}/sites/${drupal.sites_subdir}/settings.php" mode="777" />

        <!-- Delete and re-create the public files directory -->
        <delete file="${drupal.settings.file_public_path.resolved}" />
        <delete dir="${drupal.settings.file_public_path.resolved}" />
        <mkdir dir="${drupal.settings.file_public_path.resolved}" mode="775" />

        <if>
            <and>
                <isset property="drupal.settings.file_private_path"/>
                <not>
                    <equals arg1="${drupal.settings.file_private_path}" arg2="" trim="true" />
                </not>
            </and>
            <then>
                <resolvepath propertyName="drupal.settings.file_private_path.resolved" file="${drupal.root}/${drupal.settings.file_private_path}" />
                <delete file="${drupal.settings.file_private_path.resolved}" />
                <delete dir="${drupal.settings.file_private_path.resolved}" />
                <mkdir dir="${drupal.settings.file_private_path.resolved}" mode="777" />
            </then>
        </if>

        <drush command="site-install" assume="yes">
            <option name="site-name">${drupal.site_name}</option>
            <option name="account-name">${drupal.admin_user}</option>
            <option name="account-pass">admin</option>
            <param>${drupal.profile}</param>
        </drush>

        <!-- The public files directory, and everything in it, needs to be world writable. -->
        <exec command="chmod -R 777 ${drupal.settings.file_public_path.resolved}" checkreturn="true" />
    </target>


    <!--
        Target: drupal-dump-db

        Dumb wrapper to help consistently dump the database when pushing an
        installed site to prod.
        -->
    <target name="drupal-dump-db" description="Generate a database dump.">
        <fail unless="drupal.admin_user" />

        <!-- prompt for a prod admin password -->
        <propertyprompt propertyName="pass" promptText="Drupal admin password" defaultValue="admin" useExistingValue="true" />
        <drush command="user-password">
           <option name="password" value="${pass}" />
           <param>${drupal.admin_user}</param>
        </drush>

        <!-- put the site in maintenance mode -->
        <drush command="sset">
            <param>system.maintenance_mode</param>
            <param>1</param>
        </drush>

        <!-- get a commit label to use in the db dump name -->
        <gitdescribe repository="${build.dir}" tags="true" always="true" outputProperty="git_describe_output" />
        <property name="build_commit_ref" value="${git_describe_output}">
            <filterchain>
                <striplinebreaks />
            </filterchain>
        </property>

        <!-- dump the database -->
        <drush command="sql-dump">
            <option name="structure-tables-key" value="common" />
            <option name="gzip" />
            <option name="result-file" value="${build.dir}/artifacts/db-${build_commit_ref}.sql" />
        </drush>

        <!-- now we can go back to the worst password ever -->
        <drush command="user-password">
           <option name="password" value="admin" />
           <param>${drupal.admin_user}</param>
        </drush>

        <!-- and take the site out of maintenance mode -->
        <drush command="sset">
            <param>system.maintenance_mode</param>
            <param>0</param>
        </drush>
    </target>


    <!--
        Target: drupal-reinstall-module

        Utility method to uninstall and reinstall a module.
        -->
    <target name="drupal-reinstall-module">
        <fail unless="module" />

        <!-- Uninstall the module -->
        <drush command="pm-uninstall" assume="yes">
            <param>${module}</param>
        </drush>

        <!-- Enable the module -->
        <drush command="pm-enable" assume="yes">
            <param>${module}</param>
        </drush>
    </target>


    <!--
        Target: validate-clean-conf

        This will validate that the conf directory is clean, because you can
        have build problems if it isn't.
    -->
    <target name="validate-clean-conf" description="Validate clean drupal conf directory.">
        <!-- Check for un-committed changes to the Drupal config directory,
             because these can cause unexpected behavior during installation. -->
        <exec command="git status --porcelain ${build.dir}/conf/drupal/config/" outputProperty="modified_files" />

        <if>
            <and>
                <not><equals arg1="${modified_files}" arg2="" /></not>
                <!-- Only the value "yes" prevents a failure. -->
                <not><equals arg1="${drupal.allow_dirty_config}" arg2="yes" /></not>
            </and>
            <then>
                <!-- Whitespace is intentional -->
                <echo>Aborting install; your Drupal config directory is not clean. You may either:

            Re-run your phing command with the flag:
              -Ddrupal.allow_dirty_config=yes

              - OR -

            Clean up your config directory (destructive):
              git clean -f conf/drupal/config &amp;&amp; git checkout -- conf/drupal/config
                </echo>
                <fail message="Dirty config directory." />
            </then>
            <elseif>
                <not><equals arg1="${modified_files}" arg2="" /></not>
                <then>
                    <!-- Whitespace is intentional -->
                    <echo>Continuing install with dirty Drupal config directory. Changes:

${modified_files}
                    </echo>
                </then>
            </elseif>
        </if>
    </target>


    <target name="drupal-first-install">
        <fail unless="drupal.admin_user" />

        <drush command="site-install" assume="yes">
            <option name="site-name">${projectname}</option>
            <option name="account-name">${drupal.admin_user}</option>
            <option name="account-pass">admin</option>
            <param>standard</param>
        </drush>

        <drush command="pm-uninstall" assume="yes">
            <param>automated_cron</param>
            <param>big_pipe</param>
            <param>contact</param>
            <param>history</param>
            <param>search</param>
            <param>tour</param>
        </drush>

        <drush command="config-set" assume="yes">
            <param>user.settings</param>
            <param>register</param>
            <param>admin_only</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>system.date</param>
            <param>country.default</param>
            <param>US</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>system.date</param>
            <param>timezone.default</param>
            <param>America/Chicago</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>system.date</param>
            <param>timezone.user.configurable</param>
            <param>false</param>
        </drush>
        <drush command="config-delete" assume="yes">
            <param>core.extension</param>
            <param>module.standard</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>core.extension</param>
            <param>module.config_installer</param>
            <param>1000</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>core.extension</param>
            <param>profile</param>
            <param>config_installer</param>
        </drush>

        <drush command="config-export" assume="yes" />
    </target>


</project>
