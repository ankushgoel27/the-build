<?xml version="1.0"?>

<!--
  @file drupal.xml
  Targets for managing Drupal.

  Include this file in your build.xml with:
    <import file="vendor/palantirnet/the-build/tasks/drupal.xml" />

  @see defaults.properties.yml

  Copyright 2016, 2018 Palantir.net, Inc.
  -->

<project name="Drupal" default="drupal-build">

    <fail unless="build.dir" />
    <fail unless="build.env" />
    <fail unless="projectname" />

    <fail unless="drupal.root" />


    <!--
        Target: drupal-validate-clean-config

        Validate that the Drupal config directory doesn't have local modifications,
        to ensure consistent installation.
    -->
    <target name="drupal-validate-clean-config" description="Validate clean drupal config directory.">
      <!-- Assembling this property at run time. -->
      <property name="drupal.validate_clean_config.dir" value="${build.dir}/${drupal.root}/${drupal.config_sync_directory}" />

        <!-- Use git to list local (not yet committed) changes to the config directory. -->
        <exec command="git status --porcelain ${drupal.validate_clean_config.dir}" outputProperty="modified_files" />

        <if>
            <and>
                <!-- Git output will be empty if there are no local changes. -->
                <not><equals arg1="${modified_files}" arg2="" /></not>
                <!-- Bypass this check with a truthy value. -->
                <not><equals arg1="${drupal.validate_clean_config.bypass}" arg2="true" /></not>
            </and>
            <then>
                <!-- Whitespace is intentional -->
                <echo>Aborting install; your Drupal config directory is not clean. You may either:

            Ignore this problem and re-run your phing command with the flag:
              -Ddrupal.validate_clean_config.bypass=yes

              - OR -

            Check in your local changes:
              git add ${drupal.validate_clean_config.dir}
              git commit


              - OR -

            Clean up your config directory (destructive):
              git clean -f ${drupal.validate_clean_config.dir} &amp;&amp; git checkout -- ${drupal.validate_clean_config.dir}
                </echo>
                <fail message="There are local changes in your Drupal config directory." />
            </then>
            <elseif>
                <not><equals arg1="${modified_files}" arg2="" /></not>
                <then>
                    <!-- Whitespace is intentional -->
                    <echo>Continuing install with these local changes in your Drupal config directory:

${modified_files}
                    </echo>
                </then>
            </elseif>
        </if>
    </target>


    <!--
        Target: drupal-dump-db

        Generate a consistent database dump with:
          - A real admin password
          - The site in maintenance mode
          - Structure only for cache, search, and log tables
        -->
    <target name="drupal-dump-db" description="Generate a database dump.">
        <fail unless="drupal.admin_user" />

        <!-- prompt for a prod admin password -->
        <propertyprompt propertyName="pass" promptText="Drupal admin password" defaultValue="admin" useExistingValue="true" />
        <drush command="user-password">
           <option name="password" value="${pass}" />
           <param>${drupal.admin_user}</param>
        </drush>

        <!-- put the site in maintenance mode -->
        <drush command="sset">
            <param>system.maintenance_mode</param>
            <param>1</param>
        </drush>

        <!-- get a commit label to use in the db dump name -->
        <gitdescribe repository="${build.dir}" tags="true" always="true" outputProperty="git_describe_output" />
        <property name="build_commit_ref" value="${git_describe_output}">
            <filterchain>
                <striplinebreaks />
            </filterchain>
        </property>

        <!-- dump the database -->
        <drush command="sql-dump">
            <option name="structure-tables-list" value="cache,cache_*,history,search_*,sessions,watchdog" />
            <option name="gzip" />
            <option name="result-file" value="${build.dir}/artifacts/db-${build_commit_ref}.sql" />
        </drush>

        <!-- now we can go back to the worst password ever -->
        <drush command="user-password">
           <option name="password" value="admin" />
           <param>${drupal.admin_user}</param>
        </drush>

        <!-- and take the site out of maintenance mode -->
        <drush command="sset">
            <param>system.maintenance_mode</param>
            <param>0</param>
        </drush>
    </target>


    <!-- Target: drupal-load-db -->
    <target name="drupal-load-db" description="Load a database export.">
        <fail unless="drupal.load_db.export_pattern" />
        <fail unless="drupal.load_db.contents_command" />
        <fail unless="drupal.load_db.mysql_command" />

        <!-- Use the last listed file that matches the drupal.load_db.export_pattern property -->
        <exec dir="${build.dir}" command="ls ${drupal.load_db.export_pattern} | tail -1" outputProperty="drupal.load_db.discovered_file" />
        <!-- ... but respect drupal.load_db.file if it was already set. -->
        <property name="drupal.load_db.file" value="${drupal.load_db.discovered_file}" />

        <!-- Validate that we've found a file to load -->
        <if>
          <equals arg1="${drupal.load_db.file}" arg2="" />
          <then>
              <echo>Missing database export at '${drupal.load_db.export_pattern}'

Please download a database export to:
  ${drupal.load_db.export_pattern}

Alternatively, you can specify the export file prefix; for example:
  phing [YOUR-TARGET] -Ddrupal.load_db.export_pattern=artifacts/prod-*

Or, you can specify the export file directly:
  phing [YOUR-TARGET] -Ddrupal.load_db.file=artifacts/my_db.sql.gz
              </echo>
              <fail message="Missing database export." />
          </then>
        </if>

        <!-- Load the contents of the file into Drupal -->
        <property name="drupal.load_db.command" value="${build.dir}" command="${drupal.load_db.contents_command} ${drupal.load_db.file} | ${drupal.load_db.mysql_command}" />
        <echo>$> ${drupal.load_db.command}</echo>
        <exec dir="${build.dir}" command="${drupal.load_db.command}" checkreturn="true" logoutput="true" />
    </target>


    <!-- Target: drupal-first-install

         Scripted install and of Drupal for use when installing the-build, allowing the
         installation process to create the initial Drupal config.
         -->
    <target name="drupal-first-install">
        <fail unless="drupal.admin_user" />

        <drush command="site-install" assume="yes">
            <option name="site-name">${projectname}</option>
            <option name="account-name">${drupal.admin_user}</option>
            <option name="account-pass">admin</option>
            <param>standard</param>
        </drush>

        <drush command="pm-uninstall" assume="yes">
            <param>automated_cron</param>
            <param>big_pipe</param>
            <param>contact</param>
            <param>history</param>
            <param>search</param>
            <param>tour</param>
        </drush>

        <drush command="config-set" assume="yes">
            <param>user.settings</param>
            <param>register</param>
            <param>admin_only</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>system.date</param>
            <param>country.default</param>
            <param>US</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>system.date</param>
            <param>timezone.default</param>
            <param>America/Chicago</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>system.date</param>
            <param>timezone.user.configurable</param>
            <param>false</param>
        </drush>
        <drush command="config-delete" assume="yes">
            <param>core.extension</param>
            <param>module.standard</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>core.extension</param>
            <param>module.config_installer</param>
            <param>1000</param>
        </drush>
        <drush command="config-set" assume="yes">
            <param>core.extension</param>
            <param>profile</param>
            <param>config_installer</param>
        </drush>

        <drush command="config-export" assume="yes" />
    </target>


</project>
