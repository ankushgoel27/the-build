<project name="Drupal" default="test">
    <!--
      Include this file in your build.xml with:
        <import file="vendor/palantirnet/the-build/tasks/drupal.xml" />
      -->

    <!-- Uses the project directory name as the projectname -->
    <property name="build.dir" value="${application.startdir}" />
    <basename property="projectname" file="${build.dir}" suffix="local" />

    <!-- If the command wasn't called with an environment, prompt for one. -->
    <propertyprompt propertyName="build.env" defaultValue="vagrant" promptText="Environment" promptCharacter=":" useExistingValue="true" />

    <!-- Load properties for this environment, then for the default environment. -->
    <property file="${build.dir}/conf/build.${build.env}.properties" />
    <property file="${build.dir}/conf/build.default.properties" />

    <!-- These properties will generally be set by a build properties file. -->
    <!-- all drupal.* path properties should be relative to drupal.root (except for drupal.root, which should be relative to the build.dir) -->
    <!-- all build.* path properties should be relative to the build.dir -->
    <property name="drupal.root" value="web" />
    <property name="drupal.uri" value="http://${phing.project.name}.local" />
    <property name="drupal.site_name" value="${phing.project.name}" />
    <property name="drupal.profile" value="standard" />
    <property name="drupal.modules_enable" value="" />
    <property name="drupal.twig.debug" value="false" />

    <property name="drupal.settings.file_public_path" value="sites/default/files" />
    <property name="drupal.settings.file_private_path" value="" />

    <property name="drupal.database.database" value="default" />
    <property name="drupal.database.username" value="drupal" />
    <property name="drupal.database.password" value="drupal" />
    <property name="drupal.database.host" value="127.0.0.1" />

    <!-- These properties will generally not change. -->
    <property name="drupal.sites_subdir" value="default" /> <!-- Directory within 'sites' dir in the drupal root -->
    <property name="drupal.files_dir" value="sites/default/files" />
    <property name="drupal.config_sync_directory" value="../conf/drupal/config" /> <!-- pantheon = private/config -->
    <property name="build.drupal.settings" value="conf/drupal/settings.php" />
    <property name="build.drupal.services" value="conf/drupal/services.yml" />

    <!-- Configure Drush -->
    <taskdef name="drush" classname="Drush\Task" />
    <property name="drush.bin" value="${build.dir}/vendor/bin/drush" />
    <property name="drush.uri" refid="drupal.uri" />
    <property name="drush.root" value="${build.dir}/${drupal.root}" />

    <!-- Use the drushrc for the current environment, but fall back to the default. -->
    <property name="drush.config" value="${build.dir}/conf/drushrc.${build.env}.php" />
    <if>
        <not><available file="${drush.config}" /></not>
        <then>
            <property name="drush.config" value="${build.dir}/conf/drushrc.default.php" override="true" />
        </then>
    </if>

    <!-- Target: test -->
    <target name="test">
        <echo message="Hello World!" />
        <drush command="status" />
        <echoproperties />
    </target>

    <!-- Target: drupal-prepare-filesystem -->
    <target name="drupal-prepare-filesystem" description="Prepare the filesystem for running Drupal.">
        <!-- Make sure the file source directory exists, and create the Drupal
             modules, themes, profiles, and sites directories. -->
        <foreach target="create-placeholder" param="placeholder_for">
            <filelist dir="${build.dir}" files="${drupal.root}/modules/custom,${drupal.root}/themes/custom,${drupal.root}/profiles/custom,${drupal.root}/sites/${drupal.sites_subdir}" />
        </foreach>

        <chmod file="${build.dir}/${drupal.root}/sites/${drupal.sites_subdir}" mode="777" />
    </target>

    <!-- Target: drupal-prepare-settings -->
    <target name="drupal-prepare-settings" description="Write the settings.php file for Drupal.">
        <copy file="${build.dir}/${build.drupal.settings}" tofile="${build.dir}/${drupal.root}/sites/${drupal.sites_subdir}/settings.php" overwrite="true" mode="755">
            <filterchain>
                <replacetokens>
                    <token key="database.database" value="${drupal.database.database}" />
                    <token key="database.username" value="${drupal.database.username}" />
                    <token key="database.password" value="${drupal.database.password}" />
                    <token key="database.host" value="${drupal.database.host}" />
                    <token key="drupal.config_sync_directory" value="${drupal.config_sync_directory}" />
                    <token key="hash_salt" value="temporary" />
                    <token key="settings.file_public_path" value="${drupal.settings.file_public_path}" />
                    <token key="settings.file_private_path" value="${drupal.settings.file_private_path}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>


    <!-- Target: drupal-prepare-services -->
    <target name="drupal-prepare-services" description="Write the services.yml file for Drupal.">
        <fail unless="drupal.twig.debug" />

        <chmod file="${build.dir}/${drupal.root}/sites/${drupal.sites_subdir}" mode="777" />
        <copy file="${build.dir}/${build.drupal.services}" tofile="${build.dir}/${drupal.root}/sites/${drupal.sites_subdir}/services.yml" overwrite="true" mode="755">
            <filterchain>
                <replacetokens>
                    <token key="twig.debug" value="${drupal.twig.debug}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>


    <!-- Target: create-placeholder -->
    <target name="create-placeholder">
        <fail unless="placeholder_for" message="The 'placeholder_for' property is required." />
        <resolvepath propertyName="placeholder_for.resolved" file="${placeholder_for}" />

        <mkdir dir="${placeholder_for.resolved}" />
        <touch file="${placeholder_for.resolved}/.gitkeep" />
    </target>


    <!-- Target: drupal-install -->
    <target name="drupal-install" description="Install Drupal.">
        <resolvepath propertyName="drupal.settings.file_public_path.resolved" file="${drupal.root}/${drupal.settings.file_public_path}" />

        <!-- Delete and re-create the public files directory -->
        <delete dir="${drupal.settings.file_public_path.resolved}" />
        <mkdir dir="${drupal.settings.file_public_path.resolved}" mode="770" />

        <drush command="site-install" assume="yes">
            <option name="site-name">${drupal.site_name}</option>
            <option name="sites-subdir">${drupal.sites_subdir}</option>
            <option name="account-name">admin</option>
            <option name="account-pass">admin</option>
            <param>${drupal.profile}</param>
        </drush>

        <foreach list="${drupal.modules_enable}" param="module" target="drupal-enable-module" />
    </target>


    <!-- Target: drupal-enable-module -->
    <target name="drupal-enable-module">
        <fail unless="module" />
        <drush command="pm-enable" assume="yes">
            <param>${module}</param>
        </drush>
    </target>


    <!--
        Target: db-dump-for-prod
        Dumb wrapper to help consistently dump the database when pushing fresh to prod.
        -->
    <target name="db-dump-for-prod">
        <!-- prompt for a prod admin password -->
        <propertyprompt propertyName="pass" promptText="Drupal admin password" defaultValue="admin" useExistingValue="true" />
        <drush command="user-password">
           <option name="password" value="${pass}" />
           <param>admin</param>
        </drush>

        <!-- get a commit label to use in the db dump name -->
        <gitdescribe repository="${build.dir}" tags="true" always="true" outputProperty="git_describe_output" />
        <property name="build_commit_ref" value="${git_describe_output}">
            <filterchain>
                <striplinebreaks />
            </filterchain>
        </property>

        <!-- dump the database -->
        <drush command="sql-dump">
            <option name="structure-tables-key" value="common" />
            <option name="gzip" />
            <option name="result-file" value="${build.dir}/artifacts/db-${build_commit_ref}.sql" />
        </drush>

        <!-- now we can go back to the worst password ever -->
        <drush command="user-password">
           <option name="password" value="admin" />
           <param>admin</param>
        </drush>
    </target>


</project>
