<?xml version="1.0"?>

<!--
  @file build.xml
  Build targets for this project. This file should be customized for your project.

  For a full list of targets, try:
    phing -l

  @see https://github.com/palantirnet/the-build
  -->

<project name="@projectname@" default="build">

    <!-- Add property loading and tasks from palantirnet/the-build. -->
    <import file="vendor/palantirnet/the-build/tasks/the-build.xml" />


    <!-- Make these additional targets available by default. -->
    <import file="vendor/palantirnet/the-build/tasks/drupal.xml" />


    <!-- Additional optional targets. -->
    <import file="vendor/palantirnet/the-build/tasks/artifact.xml" />
    <import file="vendor/palantirnet/the-build/tasks/acquia.xml" />


    <!-- Default target: build -->
    <target name="build" description="Build the application.">
        <!-- Create the Drupal custom code directories. -->
        <foreach list="${drupal.create_dirs}" param="dir" target="mkdir" />

        <!-- Set permissions on the sites subdirectory. -->
        <mkdir dir="${drupal.root}/sites/${drupal.sites_subdir}" />
        <chmod file="${drupal.root}/sites/${drupal.sites_subdir}" mode="750" />

        <!-- Create the public files directory and make it world writable. -->
        <mkdir dir="${drupal.root}/${drupal.settings.file_public_path}" />
        <chmod file="${drupal.root}/${drupal.settings.file_public_path}" mode="744" />

        <!-- Create the private files directory and make it private. -->
        <mkdir dir="${drupal.root}/${drupal.settings.file_private_path}" />
        <chmod file="${drupal.root}/${drupal.settings.file_private_path}" mode="640" />

        <!-- Copy the settings.build.php and services.build.php templates into place. -->
        <copy todir="${build.dir}" overwrite="true" mode="544">
            <!-- Copy the template files -->
            <filelist dir="${build.dir}" files="${build.drupal.settings},${build.drupal.services}" />
            <!-- Map templates to their destinations -->
            <mapper type="firstmatch">
                <mapper type="glob" from="${build.drupal.settings}" to="${build.drupal.settings_dest}" />
                <mapper type="glob" from="${build.drupal.services}" to="${build.drupal.services_dest}" />
            </mapper>
            <!-- Substitute property values -->
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <!-- Include styleguide resources in the theme. This approach will symlink
             resources in development environments, and copy them for artifact builds. -->
        <!-- <includeresource source="styleguide/source/assets/css" dest="${drupal.root}/themes/custom/example_theme/css" /> -->
    </target>


    <!-- Target: install
         Running this target will also run the build target.
         -->
    <target name="install" depends="build,drupal-validate-clean-config" description="Install the application.">
        <drush command="site-install" assume="yes">
            <option name="site-name">${drupal.site_name}</option>
            <option name="account-name">${drupal.admin_user}</option>
            <option name="account-pass">admin</option>
            <param>${drupal.profile}</param>
        </drush>
    </target>


    <!-- Target: migrate -->
    <target name="migrate" description="Run the migrations.">
        <echo>Configure this target to load sample data and run the migrations.</echo>
    </target>


    <!-- Target: load -->
    <target name="load" description="Load a database dump.">
        <phingcall target="drupal-load-db" />
        <drush command="cache-rebuild" />
    </target>


    <!-- Target: test -->
    <target name="test" description="Run all the tests.">
        <phingcall target="code-review" />
        <phingcall target="behat" />
    </target>


    <!-- Target: behat -->
    <target name="behat">
        <property name="behat.command" value="vendor/bin/behat ${behat.args}" />
        <echo msg="$> ${behat.command}" />
        <exec command="${behat.command}" logoutput="true" checkreturn="true" />
    </target>


    <!-- Target: code-review -->
    <target name="code-review" description="Run the automated code reviews.">
        <!-- Run PHP's built in linter ('php -l') -->
        <phplint deprecatedAsError="true" haltonfailure="true">
            <fileset dir="${drupal.root}" includesfile="${phplint.includesfile}" />
        </phplint>

        <!-- Run PHP Code Sniffer. -->
        <property name="phpcs.command" value="vendor/bin/phpcs --standard=${phpcs.standard} --ignore=${phpcs.ignore} ${phpcs.directories}" />
        <echo msg="$> ${phpcs.command}" />
        <exec command="${phpcs.command}" logoutput="true" checkreturn="true" />

        <!-- Run PHP Mess Detector. -->
        <property name="phpmd.command" value="vendor/bin/phpmd ${phpmd.directories} ${phpmd.format} ${phpmd.rulesets} --suffixes=${phpmd.suffixes}" />
        <echo msg="$> ${phpmd.command}" />
        <exec command="${phpmd.command}" logoutput="true" checkreturn="true" />
    </target>


    <!-- Target: artifact -->
    <target name="artifact" description="Build and deploy the application.">
        <phing phingfile="build.xml" target="artifact-main" inheritAll="false">
            <property name="build.env" value="acquia" />
        </phing>
    </target>


</project>
